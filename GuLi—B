--[[
    Simple Mod Menu Library by AI
    Target: Roblox Mobile Exploits
    Features:
    - Draggable Window
    - Hide/Show Toggle
    - Left-side Tabs
    - Dark, modern theme with rounded corners
    - Components: Label, Button, Toggle (Checkbox), TextBox, Toggle + TextBox
]]

-- Проверяем, не была ли библиотека уже загружена
if _G.SimpleModMenuLib then
    return _G.SimpleModMenuLib
end

local Library = {}
_G.SimpleModMenuLib = Library

-- // НАСТРОЙКИ ТЕМЫ //
-- Здесь можно легко поменять все цвета, шрифты и размеры
local Theme = {
    Background = Color3.fromRGB(25, 25, 25),
    Secondary = Color3.fromRGB(35, 35, 35),
    Accent = Color3.fromRGB(80, 120, 255),
    Text = Color3.fromRGB(240, 240, 240),
    MutedText = Color3.fromRGB(150, 150, 150),
    Font = Enum.Font.GothamSemibold,
    TitleFont = Enum.Font.GothamBlack,
    TextSize = 14,
    Rounding = 8,
    Padding = 10
}

-- // ВНУТРЕННИЕ ФУНКЦИИ (ЛУЧШЕ НЕ ТРОГАТЬ) //

local UserInputService = game:GetService("UserInputService")
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ModMenu_ScreenGui_" .. tostring(math.random(1, 10000))
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
screenGui.ResetOnSpawn = false
screenGui.Parent = gethui and gethui() or game:GetService("CoreGui") -- Поддержка разных эксплоитов

local currentTabFrame = nil

local function MakeDraggable(element, handle)
    local dragging = false
    local dragInput, lastPosition, startPosition

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            lastPosition = input.Position
            startPosition = element.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    handle.InputChanged:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and dragging then
            local delta = input.Position - lastPosition
            element.Position = UDim2.new(startPosition.X.Scale, startPosition.X.Offset + delta.X, startPosition.Y.Scale, startPosition.Y.Offset + delta.Y)
        end
    end)
end

-- // ОСНОВНАЯ БИБЛИОТЕКА //

function Library:CreateWindow(title)
    local Window = {}
    local Components = {}
    Components.Tabs = {}

    -- Главное окно
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 500, 0, 320)
    MainFrame.Position = UDim2.new(0.5, -250, 0.5, -160)
    MainFrame.BackgroundColor3 = Theme.Background
    MainFrame.BorderSizePixel = 0
    MainFrame.ClipsDescendants = true
    MainFrame.Parent = screenGui

    local UICornerMain = Instance.new("UICorner")
    UICornerMain.CornerRadius = UDim.new(0, Theme.Rounding)
    UICornerMain.Parent = MainFrame

    -- Шапка (Header)
    local Header = Instance.new("Frame")
    Header.Name = "Header"
    Header.Size = UDim2.new(1, 0, 0, 40)
    Header.BackgroundColor3 = Theme.Secondary
    Header.BorderSizePixel = 0
    Header.Parent = MainFrame

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "TitleLabel"
    TitleLabel.Size = UDim2.new(1, -80, 1, 0)
    TitleLabel.Position = UDim2.new(0, Theme.Padding, 0, 0)
    TitleLabel.BackgroundColor3 = Theme.Secondary
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Font = Theme.TitleFont
    TitleLabel.Text = title or "Mod Menu"
    TitleLabel.TextColor3 = Theme.Text
    TitleLabel.TextSize = Theme.TextSize + 4
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = Header

    -- Кнопка "Закрыть"
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Position = UDim2.new(1, -Theme.Padding - 30, 0.5, -15)
    CloseButton.BackgroundColor3 = Theme.Background
    CloseButton.Text = "X"
    CloseButton.Font = Theme.Font
    CloseButton.TextColor3 = Theme.MutedText
    CloseButton.TextSize = Theme.TextSize
    CloseButton.Parent = Header
    local UICornerClose = Instance.new("UICorner", CloseButton)
    UICornerClose.CornerRadius = UDim.new(0, Theme.Rounding / 2)
    
    CloseButton.MouseButton1Click:Connect(function()
        MainFrame:Destroy()
    end)
    
    CloseButton.MouseEnter:Connect(function() CloseButton.TextColor3 = Theme.Text end)
    CloseButton.MouseLeave:Connect(function() CloseButton.TextColor3 = Theme.MutedText end)

    -- Кнопка "Скрыть"
    local HideButton = Instance.new("TextButton")
    HideButton.Name = "HideButton"
    HideButton.Size = UDim2.new(0, 30, 0, 30)
    HideButton.Position = UDim2.new(1, -Theme.Padding * 2 - 60, 0.5, -15)
    HideButton.BackgroundColor3 = Theme.Background
    HideButton.Text = "_"
    HideButton.Font = Theme.Font
    HideButton.TextColor3 = Theme.MutedText
    HideButton.TextSize = Theme.TextSize
    HideButton.Parent = Header
    local UICornerHide = Instance.new("UICorner", HideButton)
    UICornerHide.CornerRadius = UDim.new(0, Theme.Rounding / 2)
    
    HideButton.MouseButton1Click:Connect(function()
        MainFrame.Visible = not MainFrame.Visible
    end)

    HideButton.MouseEnter:Connect(function() HideButton.TextColor3 = Theme.Text end)
    HideButton.MouseLeave:Connect(function() HideButton.TextColor3 = Theme.MutedText end)

    MakeDraggable(MainFrame, Header) -- Делаем окно перетаскиваемым за шапку

    -- Контейнер для всего контента
    local ContentContainer = Instance.new("Frame")
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Size = UDim2.new(1, 0, 1, -40)
    ContentContainer.Position = UDim2.new(0, 0, 0, 40)
    ContentContainer.BackgroundTransparency = 1
    ContentContainer.Parent = MainFrame
    
    -- Левая панель вкладок
    local TabsPanel = Instance.new("Frame")
    TabsPanel.Name = "TabsPanel"
    TabsPanel.Size = UDim2.new(0, 120, 1, 0)
    TabsPanel.BackgroundColor3 = Theme.Secondary
    TabsPanel.BorderSizePixel = 0
    TabsPanel.Parent = ContentContainer

    local UIListLayoutTabs = Instance.new("UIListLayout")
    UIListLayoutTabs.FillDirection = Enum.FillDirection.Vertical
    UIListLayoutTabs.Padding = UDim.new(0, 5)
    UIListLayoutTabs.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayoutTabs.HorizontalAlignment = Enum.HorizontalAlignment.Center
    UIListLayoutTabs.Parent = TabsPanel

    -- Панель, где будет отображаться контент выбранной вкладки
    local ContentPanel = Instance.new("Frame")
    ContentPanel.Name = "ContentPanel"
    ContentPanel.Size = UDim2.new(1, -120 - Theme.Padding, 1, 0)
    ContentPanel.Position = UDim2.new(0, 120 + Theme.Padding, 0, 0)
    ContentPanel.BackgroundTransparency = 1
    ContentPanel.Parent = ContentContainer

    -- Функция добавления вкладки
    function Window:AddTab(tabName)
        local Tab = {}
        local yOffset = 0

        -- Создаем фрейм для контента этой вкладки
        local TabContentFrame = Instance.new("ScrollingFrame")
        TabContentFrame.Name = tabName .. "_Content"
        TabContentFrame.Size = UDim2.new(1, 0, 1, 0)
        TabContentFrame.BackgroundTransparency = 1
        TabContentFrame.BorderSizePixel = 0
        TabContentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContentFrame.ScrollBarImageColor3 = Theme.Accent
        TabContentFrame.ScrollBarThickness = 5
        TabContentFrame.Visible = false
        TabContentFrame.Parent = ContentPanel

        local UIListLayoutContent = Instance.new("UIListLayout")
        UIListLayoutContent.FillDirection = Enum.FillDirection.Vertical
        UIListLayoutContent.Padding = UDim.new(0, Theme.Padding)
        UIListLayoutContent.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayoutContent.HorizontalAlignment = Enum.HorizontalAlignment.Left
        UIListLayoutContent.Parent = TabContentFrame

        -- Создаем кнопку для этой вкладки
        local TabButton = Instance.new("TextButton")
        TabButton.Name = tabName .. "_Button"
        TabButton.Size = UDim2.new(1, -10, 0, 35)
        TabButton.BackgroundColor3 = Theme.Background
        TabButton.Text = tabName
        TabButton.Font = Theme.Font
        TabButton.TextColor3 = Theme.MutedText
        TabButton.TextSize = Theme.TextSize
        TabButton.LayoutOrder = #Components.Tabs + 1
        TabButton.Parent = TabsPanel
        local UICornerTabBtn = Instance.new("UICorner", TabButton)
        UICornerTabBtn.CornerRadius = UDim.new(0, Theme.Rounding / 2)

        table.insert(Components.Tabs, {
            Button = TabButton,
            Content = TabContentFrame
        })

        -- Логика переключения вкладок
        TabButton.MouseButton1Click:Connect(function()
            for _, v in pairs(Components.Tabs) do
                v.Content.Visible = false
                v.Button.TextColor3 = Theme.MutedText
                v.Button.BackgroundColor3 = Theme.Background
            end
            TabContentFrame.Visible = true
            TabButton.TextColor3 = Theme.Text
            TabButton.BackgroundColor3 = Theme.Accent
            currentTabFrame = TabContentFrame
        end)
        
        -- Активируем первую вкладку по умолчанию
        if #Components.Tabs == 1 then
            TabButton:Invoke() -- Используем Invoke для имитации клика
        end
        
        -- Функция для обновления размера скролла
        local function UpdateCanvasSize()
            TabContentFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayoutContent.AbsoluteContentSize.Y)
        end
        
        -- Функция добавления элемента в вкладку
        local function AddComponent(height)
            yOffset = yOffset + height + Theme.Padding
            task.wait() -- Ждем кадра для обновления AbsoluteContentSize
            UpdateCanvasSize()
        end
        
        -- // КОМПОНЕНТЫ ДЛЯ ВКЛАДКИ //

        function Tab:AddLabel(text)
            local label = Instance.new("TextLabel")
            label.Name = "Label"
            label.Size = UDim2.new(1, 0, 0, 20)
            label.BackgroundTransparency = 1
            label.Font = Theme.Font
            label.Text = text
            label.TextColor3 = Theme.Text
            label.TextSize = Theme.TextSize
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = TabContentFrame
            AddComponent(20)
            return label
        end
        
        function Tab:AddButton(text, callback)
            callback = callback or function() end
            local button = Instance.new("TextButton")
            button.Name = "Button"
            button.Size = UDim2.new(1, 0, 0, 35)
            button.BackgroundColor3 = Theme.Secondary
            button.Font = Theme.Font
            button.Text = text
            button.TextColor3 = Theme.Text
            button.TextSize = Theme.TextSize
            button.Parent = TabContentFrame
            local UICornerBtn = Instance.new("UICorner", button)
            UICornerBtn.CornerRadius = UDim.new(0, Theme.Rounding / 2)
            
            button.MouseButton1Click:Connect(callback)
            
            button.MouseEnter:Connect(function() button.BackgroundColor3 = Theme.Accent end)
            button.MouseLeave:Connect(function() button.BackgroundColor3 = Theme.Secondary end)
            
            AddComponent(35)
            return button
        end

        function Tab:AddToggle(text, callback)
            callback = callback or function() end
            local state = false
            
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Name = "ToggleFrame"
            toggleFrame.Size = UDim2.new(1, 0, 0, 30)
            toggleFrame.BackgroundTransparency = 1
            toggleFrame.Parent = TabContentFrame
            
            local toggleButton = Instance.new("TextButton")
            toggleButton.Name = "ToggleButton"
            toggleButton.Size = UDim2.new(0, 30, 0, 30)
            toggleButton.BackgroundColor3 = Theme.Secondary
            toggleButton.Text = ""
            toggleButton.Parent = toggleFrame
            local UICornerToggleBtn = Instance.new("UICorner", toggleButton)
            UICornerToggleBtn.CornerRadius = UDim.new(0, Theme.Rounding / 2)
            
            local toggleIndicator = Instance.new("Frame")
            toggleIndicator.Size = UDim2.new(0.5, 0, 0.5, 0)
            toggleIndicator.Position = UDim2.new(0.5, 0, 0.5, 0)
            toggleIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
            toggleIndicator.BackgroundColor3 = Theme.Accent
            toggleIndicator.BorderSizePixel = 0
            toggleIndicator.Visible = false
            toggleIndicator.Parent = toggleButton
            local UICornerIndicator = Instance.new("UICorner", toggleIndicator)
            UICornerIndicator.CornerRadius = UDim.new(0, 4)
            
            local toggleLabel = Instance.new("TextLabel")
            toggleLabel.Name = "ToggleLabel"
            toggleLabel.Size = UDim2.new(1, -40, 1, 0)
            toggleLabel.Position = UDim2.new(0, 40, 0, 0)
            toggleLabel.BackgroundTransparency = 1
            toggleLabel.Font = Theme.Font
            toggleLabel.Text = text
            toggleLabel.TextColor3 = Theme.Text
            toggleLabel.TextSize = Theme.TextSize
            toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            toggleLabel.Parent = toggleFrame
            
            toggleButton.MouseButton1Click:Connect(function()
                state = not state
                toggleIndicator.Visible = state
                pcall(callback, state)
            end)
            
            AddComponent(30)
            return toggleFrame
        end
        
        function Tab:AddTextbox(placeholder, callback)
            callback = callback or function() end
            local textbox = Instance.new("TextBox")
            textbox.Name = "Textbox"
            textbox.Size = UDim2.new(1, 0, 0, 35)
            textbox.BackgroundColor3 = Theme.Secondary
            textbox.Font = Theme.Font
            textbox.PlaceholderText = placeholder
            textbox.PlaceholderColor3 = Theme.MutedText
            textbox.Text = ""
            textbox.TextColor3 = Theme.Text
            textbox.TextSize = Theme.TextSize
            textbox.ClearTextOnFocus = false
            textbox.Parent = TabContentFrame
            local UICornerTxt = Instance.new("UICorner", textbox)
            UICornerTxt.CornerRadius = UDim.new(0, Theme.Rounding / 2)
            
            local UIPadding = Instance.new("UIPadding", textbox)
            UIPadding.PaddingLeft = UDim.new(0, 10)
            UIPadding.PaddingRight = UDim.new(0, 10)

            textbox.FocusLost:Connect(function(enterPressed)
                if enterPressed then
                    pcall(callback, textbox.Text)
                end
            end)
            
            AddComponent(35)
            return textbox
        end
        
        function Tab:AddToggleWithTextbox(text, toggleCallback, textboxCallback)
            toggleCallback = toggleCallback or function() end
            textboxCallback = textboxCallback or function() end
            local state = false

            local container = Instance.new("Frame")
            container.Name = "ToggleWithTextboxContainer"
            container.Size = UDim2.new(1, 0, 0, 70) -- Высота для двух элементов
            container.BackgroundTransparency = 1
            container.Parent = TabContentFrame
            
            local listLayout = Instance.new("UIListLayout", container)
            listLayout.FillDirection = Enum.FillDirection.Vertical
            listLayout.Padding = UDim.new(0, 5)

            -- Создаем Toggle (чекбокс)
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Name = "ToggleFrame"
            toggleFrame.Size = UDim2.new(1, 0, 0, 30)
            toggleFrame.BackgroundTransparency = 1
            toggleFrame.Parent = container
            
            local toggleButton = Instance.new("TextButton", toggleFrame)
            toggleButton.Size = UDim2.new(0, 30, 0, 30)
            toggleButton.BackgroundColor3 = Theme.Secondary
            toggleButton.Text = ""
            Instance.new("UICorner", toggleButton).CornerRadius = UDim.new(0, Theme.Rounding / 2)
            
            local toggleIndicator = Instance.new("Frame", toggleButton)
            toggleIndicator.Size = UDim2.new(0.5, 0, 0.5, 0)
            toggleIndicator.Position = UDim2.new(0.5, 0, 0.5, 0)
            toggleIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
            toggleIndicator.BackgroundColor3 = Theme.Accent
            toggleIndicator.Visible = false
            Instance.new("UICorner", toggleIndicator).CornerRadius = UDim.new(0, 4)
            
            local toggleLabel = Instance.new("TextLabel", toggleFrame)
            toggleLabel.Size = UDim2.new(1, -40, 1, 0)
            toggleLabel.Position = UDim2.new(0, 40, 0, 0)
            toggleLabel.BackgroundTransparency = 1
            toggleLabel.Font = Theme.Font
            toggleLabel.Text = text
            toggleLabel.TextColor3 = Theme.Text
            toggleLabel.TextSize = Theme.TextSize
            toggleLabel.TextXAlignment = Enum.TextXAlignment.Left

            -- Создаем Textbox
            local textbox = Instance.new("TextBox", container)
            textbox.Size = UDim2.new(1, 0, 0, 35)
            textbox.BackgroundColor3 = Theme.Secondary
            textbox.Font = Theme.Font
            textbox.PlaceholderText = "Введите значение..."
            textbox.PlaceholderColor3 = Theme.MutedText
            textbox.TextColor3 = Theme.Text
            textbox.Visible = false -- Изначально скрыт
            Instance.new("UICorner", textbox).CornerRadius = UDim.new(0, Theme.Rounding / 2)
            local UIPadding = Instance.new("UIPadding", textbox)
            UIPadding.PaddingLeft = UDim.new(0, 10)
            
            -- Логика
            toggleButton.MouseButton1Click:Connect(function()
                state = not state
                toggleIndicator.Visible = state
                textbox.Visible = state
                
                -- Обновляем размер контейнера
                if state then
                    container.Size = UDim2.new(1, 0, 0, 70)
                else
                    container.Size = UDim2.new(1, 0, 0, 30)
                end
                task.wait()
                UpdateCanvasSize()

                pcall(toggleCallback, state)
            end)
            
            textbox.FocusLost:Connect(function(enterPressed)
                if enterPressed then
                    pcall(textboxCallback, textbox.Text)
                end
            end)

            AddComponent(30) -- Изначальная высота
            return container
        end

        return Tab
    end

    return Window
end

return Library
