--[[
    Modern Dark GUI Library v3.0 by AI
    Changelog:
    - NEW: Total visual rework for the selected tab. It now blends into the content panel.
    - NEW: Added a smooth "collapse" and "expand" animation for hiding/showing the menu.
    - NEW: The 'Open' button is now draggable.
    - REWRITTEN: The dragging logic is now much more robust and won't "disconnect" on fast swipes.
    - NEW: "Fling" gesture. Swiping the window fast to the right will snap it to the edge of the screen.
]]

if _G.ModernDarkGUILib_v3 then
    return _G.ModernDarkGUILib_v3
end

local Library = {}
_G.ModernDarkGUILib_v3 = Library

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- // ОБНОВЛЕННАЯ ТЕМА //
local Theme = {
    Background = Color3.fromRGB(20, 21, 24),
    ContentBackground = Color3.fromRGB(23, 23, 23),
    Secondary = Color3.fromRGB(33, 35, 40),
    Accent = Color3.fromRGB(70, 100, 255),
    Text = Color3.fromRGB(240, 240, 240),
    MutedText = Color3.fromRGB(120, 120, 120),
    Font = Enum.Font.Gotham,
    TitleFont = Enum.Font.GothamBold,
    TextSize = 15,
    Rounding = 10,
    Padding = 12
}

-- // /// ПЕРЕПИСАННАЯ ФУНКЦИЯ ПЕРЕТАСКИВАНИЯ /// //
local function MakeDraggable(element, handle)
    local dragStart, startPos
    local lastInput, lastInputTime

    local function Snap(velocity)
        -- Если скорость свайпа вправо больше 2000 пикс/сек
        if velocity.X > 2000 then
            local targetX = 1 - (element.AbsoluteSize.X / screenGui.AbsoluteSize.X) - (Theme.Padding / screenGui.AbsoluteSize.X)
            local tween = TweenService:Create(element, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                Position = UDim2.new(targetX, 0, element.Position.Y.Scale, element.Position.Y.Offset)
            })
            tween:Play()
        end
    end

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragStart = input.Position
            startPos = element.Position
            lastInput = input.Position
            lastInputTime = tick()

            local connection
            connection = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    local deltaTime = tick() - lastInputTime
                    if deltaTime > 0 then
                        local velocity = (input.Position - lastInput) / deltaTime
                        Snap(velocity)
                    end
                    connection:Disconnect()
                else
                    element.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + (input.Position.X - dragStart.X),
                                                 startPos.Y.Scale, startPos.Y.Offset + (input.Position.Y - dragStart.Y))
                    lastInput = input.Position
                    lastInputTime = tick()
                end
            end)
        end
    end)
end

-- // ОСНОВНАЯ БИБЛИОТЕКА //
function Library:CreateWindow(title)
    local Window = {}
    local Components = {}
    Components.Tabs = {}

    local MainFrame = Instance.new("Frame")
    -- (Весь код создания MainFrame и его дочерних элементов остается прежним)
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 520, 0, 350)
    MainFrame.Position = UDim2.new(0.5, -260, 0.5, -175)
    MainFrame.BackgroundColor3 = Theme.Background
    MainFrame.BorderSizePixel = 0
    MainFrame.ClipsDescendants = false
    MainFrame.Parent = gethui and gethui() or game:GetService("CoreGui")
    
    Instance.new("UICorner", MainFrame).CornerRadius = UDim.new(0, Theme.Rounding)
    
    local GlowStroke = Instance.new("UIStroke")
    GlowStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    GlowStroke.Color = Theme.Accent
    GlowStroke.Thickness = 3
    GlowStroke.Transparency = 0.6
    GlowStroke.Parent = MainFrame

    local Header = Instance.new("Frame", MainFrame)
    Header.Name = "Header"
    Header.Size = UDim2.new(1, 0, 0, 45)
    Header.BackgroundColor3 = Theme.Background
    Header.BorderSizePixel = 0

    local TitleLabel = Instance.new("TextLabel", Header)
    TitleLabel.Name = "TitleLabel"
    TitleLabel.Size = UDim2.new(1, 0, 1, 0)
    TitleLabel.Position = UDim2.new(0, Theme.Padding, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Font = Theme.TitleFont
    TitleLabel.Text = title or "Modern Menu"
    TitleLabel.TextColor3 = Theme.Text
    TitleLabel.TextSize = Theme.TextSize + 3
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left

    local ControlsFrame = Instance.new("Frame", Header)
    ControlsFrame.Size = UDim2.new(0, 80, 1, 0)
    ControlsFrame.Position = UDim2.new(1, -80 - Theme.Padding, 0, 0)
    ControlsFrame.BackgroundTransparency = 1
    
    local ControlsLayout = Instance.new("UIListLayout", ControlsFrame)
    ControlsLayout.FillDirection = Enum.FillDirection.Horizontal
    ControlsLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    ControlsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    ControlsLayout.Padding = UDim.new(0, 5)

    local HideButton = Instance.new("TextButton", ControlsFrame)
    HideButton.Name = "HideButton"
    HideButton.Size = UDim2.new(0, 35, 0, 35)
    HideButton.BackgroundColor3 = Theme.Secondary
    HideButton.Text = ""
    Instance.new("UICorner", HideButton).CornerRadius = UDim.new(0, Theme.Rounding / 1.5)
    local HideIcon = Instance.new("Frame", HideButton)
    HideIcon.BackgroundColor3 = Theme.MutedText
    HideIcon.BorderSizePixel = 0
    HideIcon.Size = UDim2.new(0, 15, 0, 3)
    HideIcon.Position = UDim2.new(0.5, 0, 0.5, 0)
    HideIcon.AnchorPoint = Vector2.new(0.5, 0.5)

    local CloseButton = Instance.new("TextButton", ControlsFrame)
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 35, 0, 35)
    CloseButton.BackgroundColor3 = Theme.Secondary
    CloseButton.Text = "X"
    CloseButton.Font = Theme.Font
    CloseButton.TextColor3 = Theme.MutedText
    CloseButton.TextSize = Theme.TextSize
    Instance.new("UICorner", CloseButton).CornerRadius = UDim.new(0, Theme.Rounding / 1.5)

    local ContentContainer = Instance.new("Frame", MainFrame)
    ContentContainer.Size = UDim2.new(1, 0, 1, -45)
    ContentContainer.Position = UDim2.new(0, 0, 0, 45)
    ContentContainer.BackgroundTransparency = 1

    local TabsPanel = Instance.new("Frame", ContentContainer)
    TabsPanel.Size = UDim2.new(0, 140, 1, 0)
    TabsPanel.Position = UDim2.new(0, Theme.Padding, 0, 0)
    TabsPanel.BackgroundTransparency = 1
    Instance.new("UIListLayout", TabsPanel).Padding = UDim.new(0, 8)
    
    local ContentPanel = Instance.new("Frame", ContentContainer)
    ContentPanel.Size = UDim2.new(1, -140 - Theme.Padding * 2, 1, 0)
    ContentPanel.Position = UDim2.new(0, 140 + Theme.Padding, 0, 0)
    ContentPanel.BackgroundColor3 = Theme.ContentBackground
    ContentPanel.BorderSizePixel = 0
    Instance.new("UICorner", ContentPanel).CornerRadius = UDim.new(0, Theme.Rounding - 2)
    
    local OpenButton = Instance.new("TextButton")
    OpenButton.Size = UDim2.new(0, 50, 0, 50)
    OpenButton.Position = UDim2.new(0.5, -40, 0, 15)
    OpenButton.AnchorPoint = Vector2.new(0.5, 0)
    OpenButton.BackgroundColor3 = Theme.Secondary
    OpenButton.Text = ""
    OpenButton.Visible = false
    OpenButton.ZIndex = 999
    OpenButton.Parent = screenGui
    Instance.new("UICorner", OpenButton).CornerRadius = UDim.new(1, 0)
    local OpenIcon = Instance.new("ImageLabel", OpenButton)
    OpenIcon.Image = "rbxassetid://6032222304" -- Иконка шестеренки
    OpenIcon.Size = UDim2.new(0.6, 0, 0.6, 0)
    OpenIcon.Position = UDim2.new(0.5, 0, 0.5, 0)
    OpenIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    OpenIcon.BackgroundTransparency = 1
    OpenIcon.ImageColor3 = Theme.Accent

    MakeDraggable(MainFrame, Header)
    MakeDraggable(OpenButton, OpenButton) -- Делаем кнопку тоже перетаскиваемой

    -- // /// НОВАЯ АНИМИРОВАННАЯ ЛОГИКА СКРЫТИЯ/ПОКАЗА /// //
    local originalSize = MainFrame.Size
    local originalPosition = MainFrame.Position
    local isAnimating = false

    HideButton.MouseButton1Click:Connect(function()
        if isAnimating then return end
        isAnimating = true
        originalPosition = MainFrame.Position -- Сохраняем последнюю позицию

        local animInfo = TweenInfo.new(0.3, Enum.EasingStyle.Cubic, Enum.EasingDirection.In)
        local collapseSize = TweenService:Create(MainFrame, animInfo, {Size = UDim2.new(0, 50, 0, 50)})
        local collapsePos = TweenService:Create(MainFrame, animInfo, {Position = OpenButton.Position})
        local fadeOutContent = TweenService:Create(ContentContainer, TweenInfo.new(0.1), {BackgroundTransparency = 1})
        local fadeOutHeader = TweenService:Create(Header, TweenInfo.new(0.1), {BackgroundTransparency = 1})

        fadeOutContent:Play()
        fadeOutHeader:Play()
        task.wait(0.1)
        collapseSize:Play()
        collapsePos:Play()

        collapseSize.Completed:Wait()
        MainFrame.Visible = false
        OpenButton.Position = MainFrame.Position
        OpenButton.Visible = true
        isAnimating = false
    end)

    OpenButton.MouseButton1Click:Connect(function()
        if isAnimating then return end
        isAnimating = true
        MainFrame.Position = OpenButton.Position -- Начинаем анимацию с позиции кнопки
        MainFrame.Size = UDim2.new(0, 50, 0, 50)
        MainFrame.Visible = true
        OpenButton.Visible = false

        local animInfo = TweenInfo.new(0.4, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out)
        local expandSize = TweenService:Create(MainFrame, animInfo, {Size = originalSize})
        local expandPos = TweenService:Create(MainFrame, animInfo, {Position = originalPosition})
        
        expandSize:Play()
        expandPos:Play()
        
        expandSize.Completed:Wait()
        ContentContainer.BackgroundTransparency = 1
        Header.BackgroundTransparency = 0
        isAnimating = false
    end)

    CloseButton.MouseButton1Click:Connect(function()
        MainFrame:Destroy()
        OpenButton:Destroy()
    end)
    
    -- // /// ОБНОВЛЕННАЯ ЛОГИКА ВЫБОРА ВКЛАДКИ /// //
    local function SelectTab(tabToSelect)
        for _, otherTab in ipairs(Components.Tabs) do
            otherTab.Content.Visible = false
            otherTab.Button.TextColor3 = Theme.MutedText
            otherTab.Indicator.Visible = false
            -- Делаем фон неактивных вкладок полностью прозрачным
            otherTab.Button.BackgroundTransparency = 1
        end
        tabToSelect.Content.Visible = true
        tabToSelect.Button.TextColor3 = Theme.Text
        tabToSelect.Indicator.Visible = true
        -- Устанавливаем фон активной вкладки в цвет контента
        tabToSelect.Button.BackgroundColor3 = Theme.ContentBackground
        tabToSelect.Button.BackgroundTransparency = 0
    end

    function Window:AddTab(tabName)
        local Tab = {}
        local TabContentFrame = Instance.new("ScrollingFrame", ContentPanel)
        -- (Остальной код создания элементов вкладок остается практически без изменений)
        TabContentFrame.Name = tabName .. "_Content"
        TabContentFrame.Size = UDim2.new(1, 0, 1, 0)
        TabContentFrame.BackgroundTransparency = 1
        TabContentFrame.BorderSizePixel = 0
        TabContentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContentFrame.ScrollBarImageColor3 = Theme.Accent
        TabContentFrame.ScrollBarThickness = 6
        TabContentFrame.Visible = false
        
        local UIListLayoutContent = Instance.new("UIListLayout", TabContentFrame)
        UIListLayoutContent.Padding = UDim.new(0, Theme.Padding)
        local UIPadding = Instance.new("UIPadding", TabContentFrame)
        UIPadding.PaddingLeft = UDim.new(0, Theme.Padding)
        UIPadding.PaddingRight = UDim.new(0, Theme.Padding)
        UIPadding.PaddingTop = UDim.new(0, Theme.Padding)
        
        local TabButton = Instance.new("TextButton", TabsPanel)
        TabButton.Name = tabName .. "_Button"
        TabButton.Size = UDim2.new(1, 0, 0, 40)
        TabButton.BackgroundTransparency = 1 -- По умолчанию прозрачная
        TabButton.Text = tabName
        TabButton.Font = Theme.Font
        TabButton.TextColor3 = Theme.MutedText
        TabButton.TextSize = Theme.TextSize
        TabButton.TextXAlignment = Enum.TextXAlignment.Left
        Instance.new("UIPadding", TabButton).PaddingLeft = UDim.new(0, 15)
        -- Добавляем скругление для красивого слияния с панелью контента
        local corner = Instance.new("UICorner", TabButton)
        corner.CornerRadius = UDim.new(0, Theme.Rounding - 2)

        local Indicator = Instance.new("Frame", TabButton)
        Indicator.Name = "Indicator"
        Indicator.Size = UDim2.new(0, 4, 0.6, 0)
        Indicator.Position = UDim2.new(0, -6, 0.5, 0) -- Смещено
        Indicator.AnchorPoint = Vector2.new(0, 0.5)
        Indicator.BackgroundColor3 = Theme.Accent
        Indicator.BorderSizePixel = 0
        Indicator.Visible = false
        Instance.new("UICorner", Indicator).CornerRadius = UDim.new(1, 0)

        local tabObject = { Button = TabButton, Content = TabContentFrame, Indicator = Indicator }
        table.insert(Components.Tabs, tabObject)
        TabButton.MouseButton1Click:Connect(function() SelectTab(tabObject) end)
        if #Components.Tabs == 1 then task.defer(SelectTab, tabObject) end
        
        -- (Все функции Tab:Add... остаются без изменений)
        local function UpdateCanvasSize() task.wait() TabContentFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayoutContent.AbsoluteContentSize.Y + Theme.Padding) end
        function Tab:AddLabel(...) end -- (skipping full implementation for brevity, it's unchanged)
        function Tab:AddButton(...) end -- (skipping full implementation for brevity, it's unchanged)
        function Tab:AddToggle(...) end -- (skipping full implementation for brevity, it's unchanged)
        function Tab:AddTextbox(...) end -- (skipping full implementation for brevity, it's unchanged)
        function Tab:AddToggleWithTextbox(...) end -- (skipping full implementation for brevity, it's unchanged)
        -- Полный код функций Add... как в прошлой версии
        function Tab:AddLabel(text) local label = Instance.new("TextLabel", TabContentFrame) label.Size = UDim2.new(1, 0, 0, 20) label.BackgroundTransparency = 1 label.Font = Theme.Font label.Text = "  " .. text label.TextColor3 = Theme.Text label.TextSize = Theme.TextSize label.TextXAlignment = Enum.TextXAlignment.Left UpdateCanvasSize() return label end
        function Tab:AddButton(text, callback) local button = Instance.new("TextButton", TabContentFrame) button.Size = UDim2.new(1, 0, 0, 40) button.BackgroundColor3 = Theme.Secondary button.Font = Theme.Font button.Text = text button.TextColor3 = Theme.Text button.TextSize = Theme.TextSize Instance.new("UICorner", button).CornerRadius = UDim.new(0, Theme.Rounding / 1.5) button.MouseButton1Click:Connect(callback or function() end) local hoverColor = Theme.Secondary:Lerp(Color3.new(1, 1, 1), 0.1) button.MouseEnter:Connect(function() button.BackgroundColor3 = hoverColor end) button.MouseLeave:Connect(function() button.BackgroundColor3 = Theme.Secondary end) UpdateCanvasSize() return button end
        function Tab:AddToggle(text, callback) callback = callback or function() end local state = false local toggleFrame = Instance.new("TextButton", TabContentFrame) toggleFrame.AutoButtonColor = false toggleFrame.Size = UDim2.new(1, 0, 0, 40) toggleFrame.BackgroundTransparency = 1 toggleFrame.Text = "" local toggleLabel = Instance.new("TextLabel", toggleFrame) toggleLabel.Size = UDim2.new(1, -60, 1, 0) toggleLabel.Position = UDim2.new(0,0,0,0) toggleLabel.BackgroundTransparency = 1 toggleLabel.Font = Theme.Font toggleLabel.Text = text toggleLabel.TextColor3 = Theme.Text toggleLabel.TextSize = Theme.TextSize toggleLabel.TextXAlignment = Enum.TextXAlignment.Left local switch = Instance.new("Frame", toggleFrame) switch.Size = UDim2.new(0, 50, 0, 26) switch.Position = UDim2.new(1, 0, 0.5, 0) switch.AnchorPoint = Vector2.new(1, 0.5) switch.BackgroundColor3 = Theme.Secondary switch.BorderSizePixel = 0 Instance.new("UICorner", switch).CornerRadius = UDim.new(1, 0) local knob = Instance.new("Frame", switch) knob.Size = UDim2.new(0, 20, 0, 20) knob.Position = UDim2.new(0, 3, 0.5, 0) knob.AnchorPoint = Vector2.new(0, 0.5) knob.BackgroundColor3 = Theme.MutedText knob.BorderSizePixel = 0 Instance.new("UICorner", knob).CornerRadius = UDim.new(1, 0) toggleFrame.MouseButton1Click:Connect(function() state = not state pcall(callback, state) local knobPos = state and UDim2.new(1, -3, 0.5, 0) or UDim2.new(0, 3, 0.5, 0) local knobAnchor = state and Vector2.new(1, 0.5) or Vector2.new(0, 0.5) local switchColor = state and Theme.Accent or Theme.Secondary local knobColor = state and Theme.Text or Theme.MutedText game:GetService("TweenService"):Create(knob, TweenInfo.new(0.2, Enum.EasingStyle.Quad), { Position = knobPos, AnchorPoint = knobAnchor, BackgroundColor3 = knobColor }):Play() game:GetService("TweenService"):Create(switch, TweenInfo.new(0.2, Enum.EasingStyle.Quad), { BackgroundColor3 = switchColor }):Play() end) UpdateCanvasSize() return toggleFrame end
        function Tab:AddTextbox(placeholder, callback) local textbox = Instance.new("TextBox", TabContentFrame) textbox.Size = UDim2.new(1, 0, 0, 40) textbox.BackgroundColor3 = Theme.Secondary textbox.Font = Theme.Font textbox.PlaceholderText = placeholder textbox.PlaceholderColor3 = Theme.MutedText textbox.Text = "" textbox.TextColor3 = Theme.Text textbox.TextSize = Theme.TextSize textbox.ClearTextOnFocus = false Instance.new("UICorner", textbox).CornerRadius = UDim.new(0, Theme.Rounding / 1.5) local UIPadding = Instance.new("UIPadding", textbox) UIPadding.PaddingLeft = UDim.new(0, 12) UIPadding.PaddingRight = UDim.new(0, 12) textbox.FocusLost:Connect(function(enterPressed) if enterPressed then pcall(callback or function() end, textbox.Text) end end) UpdateCanvasSize() return textbox end
        function Tab:AddToggleWithTextbox(text, toggleCallback, textboxCallback) local container = Instance.new("Frame", TabContentFrame) container.Size = UDim2.new(1, 0, 0, 40) container.BackgroundTransparency = 1 local listLayout = Instance.new("UIListLayout", container) listLayout.Padding = UDim.new(0, 8) local toggle = Tab:AddToggle(text, function(state) pcall(toggleCallback or function() end, state) end) toggle.Parent = container local textbox = Tab:AddTextbox("Введите значение...", textboxCallback) textbox.Parent = container textbox.Visible = false toggle.MouseButton1Click:Connect(function() local newState = not textbox.Visible textbox.Visible = newState local targetSize = newState and UDim2.new(1, 0, 0, 40 + 40 + 8) or UDim2.new(1, 0, 0, 40) game:GetService("TweenService"):Create(container, TweenInfo.new(0.2), { Size = targetSize }):Play() task.wait(0.2) UpdateCanvasSize() end) UpdateCanvasSize() return container end

        return Tab
    end

    return Window
end

return Library
